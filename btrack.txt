backtracking uses DFS, while Branch n Bound uses BFS

choices + decision

3 ways to solve recursion problem : 
(a) draw recursive tree , using Input-Output method -> when decision making is clear
(b) induction-base-hypothesis -> make the Input smaller,  when decision making is not clear 
(c) choice diagram

Problems which are really recursive can be solved using recursive-tree (Input-Output) method,
problems which are made to solve using recursion, can be solved using IBH method.

{ first hypothesis, then induction and at last base condition. }

designing hypothesis means what should your function do,
induction means thinking what/how should ur function do at one input and what it should do at (just) smaller input.
{ for hypothesis-induction u need only two steps , don't need to sketch more than 2 steps }
base is smallest valid input
	e.g print 1 to n 
						p(n)    => 1, 2, 3, ....n
					or, p(n-1)	=> 1, 2, 3, ....n-1   and n

					for base : p(3) => p(2) and 3
							   p(2) => p(1) and 2
							   p(1) => 1


Tower of Hanoi time complexity : https://youtu.be/kJeaLssB16A 		-> 2^n
			T(n) = 2 * T(n-1) + 1
			T(n) = 2 * (2 * T(n-2) + 1) + 1 = 2^2 * T(n-2) + 2 + 1


each sub-sequence is a subset


------------------ -----------------
aage ke questions me decision tree bnate samay thoda sa dimag lagan padega;
c = c ^ ' '    -> changes case of the letter ( upper case to lower case and vice versa);

two ways to prune the 'generate Balanced parenthesis' :
 (1) we can use 'number of open brackets' and 'number of closed brackets' as a parameter and when either of the two
 	is exhausted, then break the recursion.

 (2) if the starting bracket is a opening bracket ')' , then it can never be a valid answer.

